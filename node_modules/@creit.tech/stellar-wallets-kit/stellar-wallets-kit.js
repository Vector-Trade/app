import { WalletNetwork } from './types.js';

class StellarWalletsKit {
  constructor(params) {
    this.modules = params.modules;
    this.setWallet(params.selectedWalletId);
    this.setNetwork(params.network);
  }
  /**
   * This method will return an array with all wallets supported by this kit but will let you know those the user have already installed/has access to
   * There are wallets that are by default available since they either don't need to be installed or have a fallback
   */
  async getSupportedWallets() {
    return Promise.all(
      this.modules.map(async (mod) => {
        const timer = new Promise((r) => setTimeout(() => r(false), 500));
        return {
          id: mod.productId,
          name: mod.productName,
          type: mod.moduleType,
          icon: mod.productIcon,
          isAvailable: await Promise.race([timer, mod.isAvailable()]),
          url: mod.productUrl
        };
      })
    );
  }
  setNetwork(network) {
    if (!Object.values(WalletNetwork).includes(network)) {
      throw new Error(`Wallet network "${network}" is not supported`);
    }
    this.network = network;
  }
  setWallet(id) {
    const target = this.modules.find(
      (mod) => mod.productId === id
    );
    if (!target) {
      throw new Error(`Wallet id "${id}" is not supported`);
    }
    this.selectedWallet = target.productId;
    this.selectedModule = target;
  }
  async getPublicKey(params) {
    if (!this.selectedWallet) {
      throw new Error("Please set the wallet type first");
    }
    return this.selectedModule.getPublicKey(params);
  }
  async signTx(params) {
    if (!this.selectedWallet) {
      throw new Error("Please set the wallet type first");
    }
    return this.selectedModule.signTx(params);
  }
  async signBlob(params) {
    if (!this.selectedWallet) {
      throw new Error("Please set the wallet type first");
    }
    return this.selectedModule.signBlob(params);
  }
  async signAuthEntry(params) {
    if (!this.selectedWallet) {
      throw new Error("Please set the wallet type first");
    }
    return this.selectedModule.signAuthEntry(params);
  }
  /**
   * @deprecated - This method will be removed in future releases.
   * Use specific methods instead like signTx, signBlob, etc
   */
  async sign(params) {
    if (!this.selectedWallet) {
      throw new Error("Please set the wallet type first");
    }
    let signedXDR;
    if (params.xdr) {
      const { result } = await this.selectedModule.signTx({
        xdr: params.xdr,
        network: params.network || this.network,
        publicKeys: params.publicKey ? [params.publicKey] : []
      });
      signedXDR = result;
    } else if (params.blob) {
      const { result } = await this.selectedModule.signBlob({
        blob: params.blob,
        publicKey: params.publicKey
      });
      signedXDR = result;
    } else if (params.entryPreimageXDR) {
      const { result } = await this.selectedModule.signBlob({
        blob: params.entryPreimageXDR,
        publicKey: params.publicKey
      });
      signedXDR = result;
    } else {
      throw new Error(`Something went wrong, make sure the parameters are correct`);
    }
    return { signedXDR };
  }
  // ---- Modal methods
  async openModal(params) {
    if (this.modalElement) {
      throw new Error(`Stellar Wallets Modal is already open`);
    }
    this.modalElement = document.createElement("stellar-wallets-modal");
    this.modalElement.setAttribute("showModal", "");
    if (params.modalDialogStyles) {
      this.modalElement.setAttribute("modalDialogStyles", JSON.stringify(params.modalDialogStyles));
    }
    const supportedWallets = await this.getSupportedWallets();
    this.modalElement.setAttribute("allowedWallets", JSON.stringify(supportedWallets));
    if (params.modalTitle) {
      this.modalElement.setAttribute("modalTitle", params.modalTitle);
    }
    if (params.notAvailableText) {
      this.modalElement.setAttribute("notAvailableText", params.notAvailableText);
    }
    document.body.appendChild(this.modalElement);
    const listener = (event) => {
      params.onWalletSelected(event.detail);
      this.modalElement.removeEventListener("wallet-selected", listener, false);
      document.body.removeChild(this.modalElement);
      this.modalElement = void 0;
    };
    this.modalElement.addEventListener("wallet-selected", listener, false);
    const errorListener = (event) => {
      if (params.onClosed) {
        params.onClosed(event.detail);
      }
      this.modalElement.removeEventListener("wallet-selected", listener, false);
      this.modalElement.removeEventListener("modal-closed", errorListener, false);
      document.body.removeChild(this.modalElement);
      this.modalElement = void 0;
    };
    this.modalElement.addEventListener("modal-closed", errorListener, false);
  }
  // ---- END Modal methods
}

export { StellarWalletsKit };
//# sourceMappingURL=stellar-wallets-kit.js.map
