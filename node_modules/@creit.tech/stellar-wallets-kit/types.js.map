{"version":3,"file":"types.js","sources":["../src/types.ts"],"sourcesContent":["/**\n * @deprecated - This will be removed in future releases\n */\nexport interface IStellarWalletsSignBlob {\n  blob: string;\n  publicKey?: string;\n  network?: WalletNetwork;\n}\n\n/**\n * @deprecated - This will be removed in future releases\n */\nexport interface IStellarWalletsSignAuthEntry {\n  entryPreimageXDR: string;\n  publicKey?: string;\n  network?: WalletNetwork;\n}\n\n/**\n * @deprecated - This will be removed in future releases\n */\nexport interface IStellarWalletsSignTx {\n  xdr: string;\n  publicKey?: string;\n  network?: WalletNetwork;\n}\n\nexport enum WalletNetwork {\n  PUBLIC = 'Public Global Stellar Network ; September 2015',\n  TESTNET = 'Test SDF Network ; September 2015',\n  FUTURENET = 'Test SDF Future Network ; October 2022',\n  SANDBOX = 'Local Sandbox Stellar Network ; September 2022',\n  STANDALONE = 'Standalone Network ; February 2017',\n}\n\nexport enum ModuleType {\n  HW_WALLET = 'HW_WALLET',\n  HOT_WALLET = 'HOT_WALLET',\n  BRIDGE_WALLET = 'BRIDGE_WALLET',\n  AIR_GAPED_WALLET = 'AIR_GAPED_WALLET',\n}\n\nexport interface ISupportedWallet {\n  id: string;\n  name: string;\n  type: string;\n  isAvailable: boolean;\n  icon: string;\n  url: string;\n}\n\n/**\n * The Kit Actions are the methods the kit use to interact with the Wallet/Service\n */\nexport interface KitActions {\n  /**\n   * Function used to request the public key from the active account or\n   * specific path on a wallet.\n   *\n   * @param params\n   * @param params.path - The path to tell the wallet which position to ask.\n   * This is commonly used in both hardware wallets and air gaped wallets.\n   */\n  getPublicKey(params?: { path?: string }): Promise<string>;\n\n  /**\n   * A function to request a wallet to sign a built transaction in its XDR mode.\n   *\n   * @param params\n   * @param params.xdr - The transaction to sign, this transaction must be valid\n   * and into a base64 xdr format\n   * @param params.publicKeys - An array with all the public keys the wallet\n   * should use to sign the transaction. If the wallet doesn't allow multiple\n   * signatures at once, the module should take care of it.\n   * @param params.network - The network to use when signing the transaction\n   *\n   * @return response - Promise\n   * @return response.result - Signed xdr in base64 format\n   */\n  signTx(params: { xdr: string; publicKeys: string[]; network: WalletNetwork }): Promise<{ result: string }>;\n\n  /**\n   * A function to request a wallet to sign a random blob.\n   *\n   * @param params\n   * @param params.blob - The blob to sign, this blob needs to be in base64\n   * @param params.publicKey - Public key the wallet should use to sign, if\n   * no public key is provided, the wallet should the one being used by the user.\n   *\n   * @return response - Promise\n   * @return response.result - Signature Buffer in a string format\n   */\n  signBlob(params: { blob: string; publicKey?: string }): Promise<{ result: string }>;\n\n  /**\n   * A function to request a wallet to sign a random blob.\n   *\n   * @param params\n   * @param params.entryPreimageXDR - Authorization entry image in its\n   * xdr base64 format\n   * @param params.publicKey - Public key the wallet should use to sign, if\n   * no public key is provided, the wallet should the one being used by the user.\n   *\n   * @return response - Promise\n   * @return response.result - Signature hash\n   */\n  signAuthEntry(params: { entryPreimageXDR: string; publicKey?: string }): Promise<{ result: string }>;\n}\n\n/**\n * A module is a \"plugin\" we can use within the kit so is able to handle a\n * specific type of wallet/service. There are some modules that are already\n * in the kit but any wallet developer can create their own plugins\n */\nexport interface ModuleInterface extends KitActions {\n  /**\n   * The Module type is used for filtering purposes, define the correct one in\n   * your module so we display it accordingly\n   */\n  moduleType: ModuleType;\n\n  /**\n   * This ID of the module, you should expose this ID as a constant variable\n   * so developers can use it to show/filter this module if they need to.\n   */\n  productId: string;\n\n  /**\n   * This is the name the kit will show in the builtin Modal.\n   */\n  productName: string;\n\n  /**\n   * This is the URL where users can either download, buy and just know how to\n   * get the product.\n   */\n  productUrl: string;\n\n  /**\n   * This icon will be displayed in the builtin Modal along with the product name.\n   */\n  productIcon: string;\n\n  /**\n   * This function should return true is the wallet is installed and/or available.\n   * If for example this wallet/service doesn't need to be installed to be used,\n   * return `true`.\n   *\n   * Important:\n   * Your wallet/library needs to be able to answer this function in less than 200ms.\n   * Otherwise, the kit will show it as unavailable\n   *\n   */\n  isAvailable(): Promise<boolean>;\n}\n"],"names":["WalletNetwork","ModuleType"],"mappings":"AA2BY,IAAA,aAAA,qBAAAA,cAAL,KAAA;AACL,EAAAA,eAAA,QAAS,CAAA,GAAA,gDAAA,CAAA;AACT,EAAAA,eAAA,SAAU,CAAA,GAAA,mCAAA,CAAA;AACV,EAAAA,eAAA,WAAY,CAAA,GAAA,wCAAA,CAAA;AACZ,EAAAA,eAAA,SAAU,CAAA,GAAA,gDAAA,CAAA;AACV,EAAAA,eAAA,YAAa,CAAA,GAAA,oCAAA,CAAA;AALH,EAAAA,OAAAA,cAAAA,CAAAA;AAAA,CAAA,EAAA,aAAA,IAAA,EAAA,EAAA;AAQA,IAAA,UAAA,qBAAAC,WAAL,KAAA;AACL,EAAAA,YAAA,WAAY,CAAA,GAAA,WAAA,CAAA;AACZ,EAAAA,YAAA,YAAa,CAAA,GAAA,YAAA,CAAA;AACb,EAAAA,YAAA,eAAgB,CAAA,GAAA,eAAA,CAAA;AAChB,EAAAA,YAAA,kBAAmB,CAAA,GAAA,kBAAA,CAAA;AAJT,EAAAA,OAAAA,WAAAA,CAAAA;AAAA,CAAA,EAAA,UAAA,IAAA,EAAA;;;;"}