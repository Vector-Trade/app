import albedo from '@albedo-link/intent';
import { ModuleType, WalletNetwork } from '../types.js';

const ALBEDO_ID = "albedo";
class AlbedoModule {
  constructor() {
    this.moduleType = ModuleType.HOT_WALLET;
    this.productId = ALBEDO_ID;
    this.productName = "Albedo";
    this.productUrl = "https://albedo.link/";
    this.productIcon = "https://stellar.creit.tech/wallet-icons/albedo.svg";
  }
  async isAvailable() {
    return true;
  }
  async getPublicKey() {
    return albedo.publicKey({}).then(({ pubkey }) => pubkey);
  }
  async signTx(params) {
    if (params.network !== WalletNetwork.PUBLIC && params.network !== WalletNetwork.TESTNET) {
      throw new Error(`Albedo doesn't support the network: ${params.network}`);
    }
    let updatedXdr = params.xdr;
    for (const publicKey of params.publicKeys) {
      updatedXdr = await albedo.tx({
        xdr: updatedXdr,
        pubkey: publicKey,
        network: params.network === WalletNetwork.PUBLIC ? "public" /* PUBLIC */ : "testnet" /* TESTNET */
      }).then(({ signed_envelope_xdr }) => signed_envelope_xdr);
    }
    return { result: updatedXdr };
  }
  // @ts-expect-error - This is not a supported operation so we don't use the params
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async signBlob(params) {
    throw new Error("Albedo does not support signing random blobs");
  }
  // @ts-expect-error - This is not a supported operation so we don't use the params
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async signAuthEntry(params) {
    throw new Error("Albedo does not support signing authorization entries");
  }
}
var AlbedoNetwork = /* @__PURE__ */ ((AlbedoNetwork2) => {
  AlbedoNetwork2["PUBLIC"] = "public";
  AlbedoNetwork2["TESTNET"] = "testnet";
  return AlbedoNetwork2;
})(AlbedoNetwork || {});

export { ALBEDO_ID, AlbedoModule, AlbedoNetwork };
//# sourceMappingURL=albedo.module.js.map
