'use strict';

var xbullWalletConnect = require('@creit-tech/xbull-wallet-connect');
var types = require('../types.cjs');

const XBULL_ID = "xbull";
class xBullModule {
  constructor() {
    this.moduleType = types.ModuleType.HOT_WALLET;
    this.productId = XBULL_ID;
    this.productName = "xBull";
    this.productUrl = "https://xbull.app";
    this.productIcon = "https://stellar.creit.tech/wallet-icons/xbull.svg";
  }
  async isAvailable() {
    return true;
  }
  async getPublicKey() {
    const bridge = new xbullWalletConnect.xBullWalletConnect();
    const publicKey = await bridge.connect();
    bridge.closeConnections();
    return publicKey;
  }
  async signTx(params) {
    const bridge = new xbullWalletConnect.xBullWalletConnect();
    let updatedXdr = params.xdr;
    for (const publicKey of params.publicKeys) {
      updatedXdr = await bridge.sign({
        xdr: updatedXdr,
        publicKey,
        network: params.network
      });
    }
    bridge.closeConnections();
    return { result: updatedXdr };
  }
  // @ts-expect-error - This is not a supported operation so we don't use the params
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async signBlob(params) {
    throw new Error("xBull does not support signing random blobs");
  }
  // @ts-expect-error - This is not a supported operation so we don't use the params
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async signAuthEntry(params) {
    throw new Error("xBull does not support signing authorization entries");
  }
}

exports.XBULL_ID = XBULL_ID;
exports.xBullModule = xBullModule;
//# sourceMappingURL=xbull.module.cjs.map
