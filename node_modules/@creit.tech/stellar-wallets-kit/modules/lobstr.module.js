import { isConnected, getPublicKey, signTransaction } from '@lobstrco/signer-extension-api';
import { ModuleType } from '../types.js';

const LOBSTR_ID = "lobstr";
class LobstrModule {
  constructor() {
    this.moduleType = ModuleType.HOT_WALLET;
    this.productId = LOBSTR_ID;
    this.productName = "LOBSTR";
    this.productUrl = "https://lobstr.co";
    this.productIcon = "https://stellar.creit.tech/wallet-icons/lobstr.svg";
  }
  async isAvailable() {
    return isConnected();
  }
  async getPublicKey() {
    if (!await isConnected()) {
      throw new Error(`Lobstr is not connected`);
    }
    return getPublicKey();
  }
  async signTx(params) {
    if (!await isConnected()) {
      throw new Error(`Lobstr is not connected`);
    }
    if (params.publicKeys.length > 0) {
      console.warn(`Lobstr doesn't allow specifying what public key should sign the transaction, we skip the value`);
    }
    if (params.network) {
      console.warn(`Lobstr doesn't allow specifying the network that should be used, we skip the value`);
    }
    return { result: await signTransaction(params.xdr) };
  }
  // @ts-expect-error - This is not a supported operation so we don't use the params
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async signBlob(params) {
    throw new Error("Lobstr does not support signing random blobs");
  }
  // @ts-expect-error - This is not a supported operation so we don't use the params
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async signAuthEntry(params) {
    throw new Error("Lobstr does not support signing authorization entries");
  }
}

export { LOBSTR_ID, LobstrModule };
//# sourceMappingURL=lobstr.module.js.map
