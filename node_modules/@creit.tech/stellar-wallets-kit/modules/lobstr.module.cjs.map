{"version":3,"file":"lobstr.module.cjs","sources":["../../src/modules/lobstr.module.ts"],"sourcesContent":["import { isConnected, getPublicKey, signTransaction } from '@lobstrco/signer-extension-api';\nimport { ModuleInterface, ModuleType, WalletNetwork } from '../types';\n\nexport const LOBSTR_ID = 'lobstr';\n\nexport class LobstrModule implements ModuleInterface {\n  moduleType: ModuleType = ModuleType.HOT_WALLET;\n\n  productId: string = LOBSTR_ID;\n  productName: string = 'LOBSTR';\n  productUrl: string = 'https://lobstr.co';\n  productIcon: string = 'https://stellar.creit.tech/wallet-icons/lobstr.svg';\n\n  async isAvailable(): Promise<boolean> {\n    return isConnected();\n  }\n\n  async getPublicKey(): Promise<string> {\n    if (!(await isConnected())) {\n      throw new Error(`Lobstr is not connected`);\n    }\n\n    return getPublicKey();\n  }\n\n  async signTx(params: { xdr: string; publicKeys: string[]; network: WalletNetwork }): Promise<{ result: string }> {\n    if (!(await isConnected())) {\n      throw new Error(`Lobstr is not connected`);\n    }\n\n    if (params.publicKeys.length > 0) {\n      console.warn(`Lobstr doesn't allow specifying what public key should sign the transaction, we skip the value`);\n    }\n\n    if (params.network) {\n      console.warn(`Lobstr doesn't allow specifying the network that should be used, we skip the value`);\n    }\n\n    return { result: await signTransaction(params.xdr) };\n  }\n\n  // @ts-expect-error - This is not a supported operation so we don't use the params\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async signBlob(params: { blob: string; publicKey?: string }): Promise<{ result: string }> {\n    throw new Error('Lobstr does not support signing random blobs');\n  }\n\n  // @ts-expect-error - This is not a supported operation so we don't use the params\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async signAuthEntry(params: { entryPreimageXDR: string; publicKey?: string }): Promise<{ result: string }> {\n    throw new Error('Lobstr does not support signing authorization entries');\n  }\n}\n"],"names":["ModuleType","isConnected","getPublicKey","signTransaction"],"mappings":";;;;;AAGO,MAAM,SAAY,GAAA,SAAA;AAElB,MAAM,YAAwC,CAAA;AAAA,EAA9C,WAAA,GAAA;AACL,IAAA,IAAA,CAAA,UAAA,GAAyBA,gBAAW,CAAA,UAAA,CAAA;AAEpC,IAAoB,IAAA,CAAA,SAAA,GAAA,SAAA,CAAA;AACpB,IAAsB,IAAA,CAAA,WAAA,GAAA,QAAA,CAAA;AACtB,IAAqB,IAAA,CAAA,UAAA,GAAA,mBAAA,CAAA;AACrB,IAAsB,IAAA,CAAA,WAAA,GAAA,oDAAA,CAAA;AAAA,GAAA;AAAA,EAEtB,MAAM,WAAgC,GAAA;AACpC,IAAA,OAAOC,8BAAY,EAAA,CAAA;AAAA,GACrB;AAAA,EAEA,MAAM,YAAgC,GAAA;AACpC,IAAI,IAAA,CAAE,MAAMA,8BAAA,EAAgB,EAAA;AAC1B,MAAM,MAAA,IAAI,MAAM,CAAyB,uBAAA,CAAA,CAAA,CAAA;AAAA,KAC3C;AAEA,IAAA,OAAOC,+BAAa,EAAA,CAAA;AAAA,GACtB;AAAA,EAEA,MAAM,OAAO,MAAoG,EAAA;AAC/G,IAAI,IAAA,CAAE,MAAMD,8BAAA,EAAgB,EAAA;AAC1B,MAAM,MAAA,IAAI,MAAM,CAAyB,uBAAA,CAAA,CAAA,CAAA;AAAA,KAC3C;AAEA,IAAI,IAAA,MAAA,CAAO,UAAW,CAAA,MAAA,GAAS,CAAG,EAAA;AAChC,MAAA,OAAA,CAAQ,KAAK,CAAgG,8FAAA,CAAA,CAAA,CAAA;AAAA,KAC/G;AAEA,IAAA,IAAI,OAAO,OAAS,EAAA;AAClB,MAAA,OAAA,CAAQ,KAAK,CAAoF,kFAAA,CAAA,CAAA,CAAA;AAAA,KACnG;AAEA,IAAA,OAAO,EAAE,MAAQ,EAAA,MAAME,kCAAgB,CAAA,MAAA,CAAO,GAAG,CAAE,EAAA,CAAA;AAAA,GACrD;AAAA;AAAA;AAAA,EAIA,MAAM,SAAS,MAA2E,EAAA;AACxF,IAAM,MAAA,IAAI,MAAM,8CAA8C,CAAA,CAAA;AAAA,GAChE;AAAA;AAAA;AAAA,EAIA,MAAM,cAAc,MAAuF,EAAA;AACzG,IAAM,MAAA,IAAI,MAAM,uDAAuD,CAAA,CAAA;AAAA,GACzE;AACF;;;;;"}