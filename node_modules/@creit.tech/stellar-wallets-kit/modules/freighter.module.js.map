{"version":3,"file":"freighter.module.js","sources":["../../src/modules/freighter.module.ts"],"sourcesContent":["import { isConnected, signTransaction, signBlob, signAuthEntry, requestAccess } from '@stellar/freighter-api';\nimport { ModuleInterface, ModuleType, WalletNetwork } from '../types';\n\nexport const FREIGHTER_ID = 'freighter';\n\nexport class FreighterModule implements ModuleInterface {\n  moduleType: ModuleType = ModuleType.HOT_WALLET;\n\n  productId: string = FREIGHTER_ID;\n  productName: string = 'Freighter';\n  productUrl: string = 'https://freighter.app';\n  productIcon: string = 'https://stellar.creit.tech/wallet-icons/freighter.svg';\n\n  async isAvailable(): Promise<boolean> {\n    return isConnected();\n  }\n\n  async getPublicKey(): Promise<string> {\n    if (!(await isConnected())) {\n      throw new Error(`Freighter is not connected`);\n    }\n\n    return requestAccess();\n  }\n\n  async signTx(params: { xdr: string; publicKeys: string[]; network: WalletNetwork }): Promise<{ result: string }> {\n    if (!(await isConnected())) {\n      throw new Error(`Freighter is not connected`);\n    }\n\n    let updatedXdr: string = params.xdr;\n    for (const publicKey of params.publicKeys) {\n      updatedXdr = await signTransaction(updatedXdr, {\n        accountToSign: publicKey,\n        networkPassphrase: params.network,\n      });\n    }\n\n    return { result: updatedXdr };\n  }\n\n  async signBlob(params: { blob: string; publicKey: string }): Promise<{ result: string }> {\n    if (!(await isConnected())) {\n      throw new Error(`Freighter is not connected`);\n    }\n\n    const result: string = await signBlob(params.blob, { accountToSign: params.publicKey });\n\n    return { result };\n  }\n\n  async signAuthEntry(params: { entryPreimageXDR: string; publicKey: string }): Promise<{ result: string }> {\n    if (!(await isConnected())) {\n      throw new Error(`Freighter is not connected`);\n    }\n\n    const result: string = await signAuthEntry(params.entryPreimageXDR, {\n      accountToSign: params.publicKey,\n    });\n\n    return { result };\n  }\n}\n"],"names":[],"mappings":";;;AAGO,MAAM,YAAe,GAAA,YAAA;AAErB,MAAM,eAA2C,CAAA;AAAA,EAAjD,WAAA,GAAA;AACL,IAAA,IAAA,CAAA,UAAA,GAAyB,UAAW,CAAA,UAAA,CAAA;AAEpC,IAAoB,IAAA,CAAA,SAAA,GAAA,YAAA,CAAA;AACpB,IAAsB,IAAA,CAAA,WAAA,GAAA,WAAA,CAAA;AACtB,IAAqB,IAAA,CAAA,UAAA,GAAA,uBAAA,CAAA;AACrB,IAAsB,IAAA,CAAA,WAAA,GAAA,uDAAA,CAAA;AAAA,GAAA;AAAA,EAEtB,MAAM,WAAgC,GAAA;AACpC,IAAA,OAAO,WAAY,EAAA,CAAA;AAAA,GACrB;AAAA,EAEA,MAAM,YAAgC,GAAA;AACpC,IAAI,IAAA,CAAE,MAAM,WAAA,EAAgB,EAAA;AAC1B,MAAM,MAAA,IAAI,MAAM,CAA4B,0BAAA,CAAA,CAAA,CAAA;AAAA,KAC9C;AAEA,IAAA,OAAO,aAAc,EAAA,CAAA;AAAA,GACvB;AAAA,EAEA,MAAM,OAAO,MAAoG,EAAA;AAC/G,IAAI,IAAA,CAAE,MAAM,WAAA,EAAgB,EAAA;AAC1B,MAAM,MAAA,IAAI,MAAM,CAA4B,0BAAA,CAAA,CAAA,CAAA;AAAA,KAC9C;AAEA,IAAA,IAAI,aAAqB,MAAO,CAAA,GAAA,CAAA;AAChC,IAAW,KAAA,MAAA,SAAA,IAAa,OAAO,UAAY,EAAA;AACzC,MAAa,UAAA,GAAA,MAAM,gBAAgB,UAAY,EAAA;AAAA,QAC7C,aAAe,EAAA,SAAA;AAAA,QACf,mBAAmB,MAAO,CAAA,OAAA;AAAA,OAC3B,CAAA,CAAA;AAAA,KACH;AAEA,IAAO,OAAA,EAAE,QAAQ,UAAW,EAAA,CAAA;AAAA,GAC9B;AAAA,EAEA,MAAM,SAAS,MAA0E,EAAA;AACvF,IAAI,IAAA,CAAE,MAAM,WAAA,EAAgB,EAAA;AAC1B,MAAM,MAAA,IAAI,MAAM,CAA4B,0BAAA,CAAA,CAAA,CAAA;AAAA,KAC9C;AAEA,IAAM,MAAA,MAAA,GAAiB,MAAM,QAAS,CAAA,MAAA,CAAO,MAAM,EAAE,aAAA,EAAe,MAAO,CAAA,SAAA,EAAW,CAAA,CAAA;AAEtF,IAAA,OAAO,EAAE,MAAO,EAAA,CAAA;AAAA,GAClB;AAAA,EAEA,MAAM,cAAc,MAAsF,EAAA;AACxG,IAAI,IAAA,CAAE,MAAM,WAAA,EAAgB,EAAA;AAC1B,MAAM,MAAA,IAAI,MAAM,CAA4B,0BAAA,CAAA,CAAA,CAAA;AAAA,KAC9C;AAEA,IAAA,MAAM,MAAiB,GAAA,MAAM,aAAc,CAAA,MAAA,CAAO,gBAAkB,EAAA;AAAA,MAClE,eAAe,MAAO,CAAA,SAAA;AAAA,KACvB,CAAA,CAAA;AAED,IAAA,OAAO,EAAE,MAAO,EAAA,CAAA;AAAA,GAClB;AACF;;;;"}