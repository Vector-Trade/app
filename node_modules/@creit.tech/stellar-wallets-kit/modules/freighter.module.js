import { isConnected, requestAccess, signTransaction, signBlob, signAuthEntry } from '@stellar/freighter-api';
import { ModuleType } from '../types.js';

const FREIGHTER_ID = "freighter";
class FreighterModule {
  constructor() {
    this.moduleType = ModuleType.HOT_WALLET;
    this.productId = FREIGHTER_ID;
    this.productName = "Freighter";
    this.productUrl = "https://freighter.app";
    this.productIcon = "https://stellar.creit.tech/wallet-icons/freighter.svg";
  }
  async isAvailable() {
    return isConnected();
  }
  async getPublicKey() {
    if (!await isConnected()) {
      throw new Error(`Freighter is not connected`);
    }
    return requestAccess();
  }
  async signTx(params) {
    if (!await isConnected()) {
      throw new Error(`Freighter is not connected`);
    }
    let updatedXdr = params.xdr;
    for (const publicKey of params.publicKeys) {
      updatedXdr = await signTransaction(updatedXdr, {
        accountToSign: publicKey,
        networkPassphrase: params.network
      });
    }
    return { result: updatedXdr };
  }
  async signBlob(params) {
    if (!await isConnected()) {
      throw new Error(`Freighter is not connected`);
    }
    const result = await signBlob(params.blob, { accountToSign: params.publicKey });
    return { result };
  }
  async signAuthEntry(params) {
    if (!await isConnected()) {
      throw new Error(`Freighter is not connected`);
    }
    const result = await signAuthEntry(params.entryPreimageXDR, {
      accountToSign: params.publicKey
    });
    return { result };
  }
}

export { FREIGHTER_ID, FreighterModule };
//# sourceMappingURL=freighter.module.js.map
