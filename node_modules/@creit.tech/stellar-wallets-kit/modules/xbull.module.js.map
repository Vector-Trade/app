{"version":3,"file":"xbull.module.js","sources":["../../src/modules/xbull.module.ts"],"sourcesContent":["import { xBullWalletConnect } from '@creit-tech/xbull-wallet-connect';\nimport { ModuleInterface, ModuleType, WalletNetwork } from '../types';\n\nexport const XBULL_ID = 'xbull';\n\nexport class xBullModule implements ModuleInterface {\n  moduleType: ModuleType = ModuleType.HOT_WALLET;\n\n  productId: string = XBULL_ID;\n  productName: string = 'xBull';\n  productUrl: string = 'https://xbull.app';\n  productIcon: string = 'https://stellar.creit.tech/wallet-icons/xbull.svg';\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  async getPublicKey(): Promise<string> {\n    const bridge: xBullWalletConnect = new xBullWalletConnect();\n    const publicKey: string = await bridge.connect();\n    bridge.closeConnections();\n    return publicKey;\n  }\n\n  async signTx(params: { xdr: string; publicKeys: string[]; network: WalletNetwork }): Promise<{ result: string }> {\n    const bridge: xBullWalletConnect = new xBullWalletConnect();\n\n    let updatedXdr: string = params.xdr;\n    for (const publicKey of params.publicKeys) {\n      updatedXdr = await bridge.sign({\n        xdr: updatedXdr,\n        publicKey: publicKey,\n        network: params.network,\n      });\n    }\n\n    bridge.closeConnections();\n    return { result: updatedXdr };\n  }\n\n  // @ts-expect-error - This is not a supported operation so we don't use the params\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async signBlob(params: { blob: string; publicKey?: string }): Promise<{ result: string }> {\n    throw new Error('xBull does not support signing random blobs');\n  }\n\n  // @ts-expect-error - This is not a supported operation so we don't use the params\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async signAuthEntry(params: { entryPreimageXDR: string; publicKey?: string }): Promise<{ result: string }> {\n    throw new Error('xBull does not support signing authorization entries');\n  }\n}\n"],"names":[],"mappings":";;;AAGO,MAAM,QAAW,GAAA,QAAA;AAEjB,MAAM,WAAuC,CAAA;AAAA,EAA7C,WAAA,GAAA;AACL,IAAA,IAAA,CAAA,UAAA,GAAyB,UAAW,CAAA,UAAA,CAAA;AAEpC,IAAoB,IAAA,CAAA,SAAA,GAAA,QAAA,CAAA;AACpB,IAAsB,IAAA,CAAA,WAAA,GAAA,OAAA,CAAA;AACtB,IAAqB,IAAA,CAAA,UAAA,GAAA,mBAAA,CAAA;AACrB,IAAsB,IAAA,CAAA,WAAA,GAAA,mDAAA,CAAA;AAAA,GAAA;AAAA,EAEtB,MAAM,WAAgC,GAAA;AACpC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,YAAgC,GAAA;AACpC,IAAM,MAAA,MAAA,GAA6B,IAAI,kBAAmB,EAAA,CAAA;AAC1D,IAAM,MAAA,SAAA,GAAoB,MAAM,MAAA,CAAO,OAAQ,EAAA,CAAA;AAC/C,IAAA,MAAA,CAAO,gBAAiB,EAAA,CAAA;AACxB,IAAO,OAAA,SAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,OAAO,MAAoG,EAAA;AAC/G,IAAM,MAAA,MAAA,GAA6B,IAAI,kBAAmB,EAAA,CAAA;AAE1D,IAAA,IAAI,aAAqB,MAAO,CAAA,GAAA,CAAA;AAChC,IAAW,KAAA,MAAA,SAAA,IAAa,OAAO,UAAY,EAAA;AACzC,MAAa,UAAA,GAAA,MAAM,OAAO,IAAK,CAAA;AAAA,QAC7B,GAAK,EAAA,UAAA;AAAA,QACL,SAAA;AAAA,QACA,SAAS,MAAO,CAAA,OAAA;AAAA,OACjB,CAAA,CAAA;AAAA,KACH;AAEA,IAAA,MAAA,CAAO,gBAAiB,EAAA,CAAA;AACxB,IAAO,OAAA,EAAE,QAAQ,UAAW,EAAA,CAAA;AAAA,GAC9B;AAAA;AAAA;AAAA,EAIA,MAAM,SAAS,MAA2E,EAAA;AACxF,IAAM,MAAA,IAAI,MAAM,6CAA6C,CAAA,CAAA;AAAA,GAC/D;AAAA;AAAA;AAAA,EAIA,MAAM,cAAc,MAAuF,EAAA;AACzG,IAAM,MAAA,IAAI,MAAM,sDAAsD,CAAA,CAAA;AAAA,GACxE;AACF;;;;"}