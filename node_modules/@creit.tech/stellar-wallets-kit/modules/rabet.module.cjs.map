{"version":3,"file":"rabet.module.cjs","sources":["../../src/modules/rabet.module.ts"],"sourcesContent":["import { ModuleInterface, ModuleType, WalletNetwork } from '../types';\n\ndeclare const window: Window &\n  typeof globalThis & {\n    rabet?: {\n      connect: () => Promise<{ publicKey: string }>;\n      sign: (xdr: string, network: RabetNetwork) => Promise<{ xdr: string }>;\n    };\n  };\n\nexport const RABET_ID = 'rabet';\n\nexport class RabetModule implements ModuleInterface {\n  moduleType: ModuleType = ModuleType.HOT_WALLET;\n\n  productId: string = RABET_ID;\n  productName: string = 'Rabet';\n  productUrl: string = 'https://rabet.io/';\n  productIcon: string = 'https://stellar.creit.tech/wallet-icons/rabet.svg';\n\n  async isAvailable(): Promise<boolean> {\n    return !!window.rabet;\n  }\n\n  async getPublicKey(): Promise<string> {\n    if (!window.rabet) {\n      throw new Error('Rabet is not installed');\n    }\n\n    const { publicKey } = await window.rabet.connect();\n\n    return publicKey;\n  }\n\n  async signTx(params: { xdr: string; publicKeys: string[]; network: WalletNetwork }): Promise<{ result: string }> {\n    if (!window.rabet) {\n      throw new Error('Rabet is not installed');\n    }\n\n    if (params.network !== WalletNetwork.PUBLIC && params.network !== WalletNetwork.TESTNET) {\n      throw new Error(`Rabet doesn't support the network: ${params.network}`);\n    }\n\n    if (params.publicKeys.length > 0) {\n      console.warn(`Rabet doesn't allow specifying the public keys to use`);\n    }\n\n    const result = await window.rabet.sign(\n      params.xdr,\n      params.network === WalletNetwork.PUBLIC ? RabetNetwork.PUBLIC : RabetNetwork.TESTNET\n    );\n\n    return { result: result.xdr };\n  }\n\n  // @ts-expect-error - This is not a supported operation so we don't use the params\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async signBlob(params: { blob: string; publicKey?: string }): Promise<{ result: string }> {\n    throw new Error('Rabet does not support signing random blobs');\n  }\n\n  // @ts-expect-error - This is not a supported operation so we don't use the params\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async signAuthEntry(params: { entryPreimageXDR: string; publicKey?: string }): Promise<{ result: string }> {\n    throw new Error('Rabet does not support signing authorization entries');\n  }\n}\n\nexport enum RabetNetwork {\n  PUBLIC = 'mainnet',\n  TESTNET = 'testnet',\n}\n"],"names":["ModuleType","WalletNetwork","RabetNetwork"],"mappings":";;;;AAUO,MAAM,QAAW,GAAA,QAAA;AAEjB,MAAM,WAAuC,CAAA;AAAA,EAA7C,WAAA,GAAA;AACL,IAAA,IAAA,CAAA,UAAA,GAAyBA,gBAAW,CAAA,UAAA,CAAA;AAEpC,IAAoB,IAAA,CAAA,SAAA,GAAA,QAAA,CAAA;AACpB,IAAsB,IAAA,CAAA,WAAA,GAAA,OAAA,CAAA;AACtB,IAAqB,IAAA,CAAA,UAAA,GAAA,mBAAA,CAAA;AACrB,IAAsB,IAAA,CAAA,WAAA,GAAA,mDAAA,CAAA;AAAA,GAAA;AAAA,EAEtB,MAAM,WAAgC,GAAA;AACpC,IAAO,OAAA,CAAC,CAAC,MAAO,CAAA,KAAA,CAAA;AAAA,GAClB;AAAA,EAEA,MAAM,YAAgC,GAAA;AACpC,IAAI,IAAA,CAAC,OAAO,KAAO,EAAA;AACjB,MAAM,MAAA,IAAI,MAAM,wBAAwB,CAAA,CAAA;AAAA,KAC1C;AAEA,IAAA,MAAM,EAAE,SAAU,EAAA,GAAI,MAAM,MAAA,CAAO,MAAM,OAAQ,EAAA,CAAA;AAEjD,IAAO,OAAA,SAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,OAAO,MAAoG,EAAA;AAC/G,IAAI,IAAA,CAAC,OAAO,KAAO,EAAA;AACjB,MAAM,MAAA,IAAI,MAAM,wBAAwB,CAAA,CAAA;AAAA,KAC1C;AAEA,IAAA,IAAI,OAAO,OAAY,KAAAC,mBAAA,CAAc,UAAU,MAAO,CAAA,OAAA,KAAYA,oBAAc,OAAS,EAAA;AACvF,MAAA,MAAM,IAAI,KAAA,CAAM,CAAsC,mCAAA,EAAA,MAAA,CAAO,OAAO,CAAE,CAAA,CAAA,CAAA;AAAA,KACxE;AAEA,IAAI,IAAA,MAAA,CAAO,UAAW,CAAA,MAAA,GAAS,CAAG,EAAA;AAChC,MAAA,OAAA,CAAQ,KAAK,CAAuD,qDAAA,CAAA,CAAA,CAAA;AAAA,KACtE;AAEA,IAAM,MAAA,MAAA,GAAS,MAAM,MAAA,CAAO,KAAM,CAAA,IAAA;AAAA,MAChC,MAAO,CAAA,GAAA;AAAA,MACP,MAAO,CAAA,OAAA,KAAYA,mBAAc,CAAA,MAAA,GAAS,SAAsB,gBAAA,SAAA;AAAA,KAClE,CAAA;AAEA,IAAO,OAAA,EAAE,MAAQ,EAAA,MAAA,CAAO,GAAI,EAAA,CAAA;AAAA,GAC9B;AAAA;AAAA;AAAA,EAIA,MAAM,SAAS,MAA2E,EAAA;AACxF,IAAM,MAAA,IAAI,MAAM,6CAA6C,CAAA,CAAA;AAAA,GAC/D;AAAA;AAAA;AAAA,EAIA,MAAM,cAAc,MAAuF,EAAA;AACzG,IAAM,MAAA,IAAI,MAAM,sDAAsD,CAAA,CAAA;AAAA,GACxE;AACF,CAAA;AAEY,IAAA,YAAA,qBAAAC,aAAL,KAAA;AACL,EAAAA,cAAA,QAAS,CAAA,GAAA,SAAA,CAAA;AACT,EAAAA,cAAA,SAAU,CAAA,GAAA,SAAA,CAAA;AAFA,EAAAA,OAAAA,aAAAA,CAAAA;AAAA,CAAA,EAAA,YAAA,IAAA,EAAA;;;;;;"}