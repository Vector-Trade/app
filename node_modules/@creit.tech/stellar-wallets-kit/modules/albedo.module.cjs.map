{"version":3,"file":"albedo.module.cjs","sources":["../../src/modules/albedo.module.ts"],"sourcesContent":["import albedo from '@albedo-link/intent';\n\nimport { ModuleInterface, ModuleType, WalletNetwork } from '../types';\n\nexport const ALBEDO_ID = 'albedo';\n\nexport class AlbedoModule implements ModuleInterface {\n  moduleType: ModuleType = ModuleType.HOT_WALLET;\n\n  productId: string = ALBEDO_ID;\n  productName: string = 'Albedo';\n  productUrl: string = 'https://albedo.link/';\n  productIcon: string = 'https://stellar.creit.tech/wallet-icons/albedo.svg';\n\n  async isAvailable(): Promise<boolean> {\n    return true;\n  }\n\n  async getPublicKey(): Promise<string> {\n    return albedo.publicKey({}).then(({ pubkey }) => pubkey);\n  }\n\n  async signTx(params: { xdr: string; publicKeys: string[]; network: WalletNetwork }): Promise<{ result: string }> {\n    if (params.network !== WalletNetwork.PUBLIC && params.network !== WalletNetwork.TESTNET) {\n      throw new Error(`Albedo doesn't support the network: ${params.network}`);\n    }\n\n    let updatedXdr: string = params.xdr;\n    for (const publicKey of params.publicKeys) {\n      updatedXdr = await albedo\n        .tx({\n          xdr: updatedXdr,\n          pubkey: publicKey,\n          network: params.network === WalletNetwork.PUBLIC ? AlbedoNetwork.PUBLIC : AlbedoNetwork.TESTNET,\n        })\n        .then(({ signed_envelope_xdr }) => signed_envelope_xdr);\n    }\n\n    return { result: updatedXdr };\n  }\n\n  // @ts-expect-error - This is not a supported operation so we don't use the params\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async signBlob(params: { blob: string; publicKey?: string }): Promise<{ result: string }> {\n    throw new Error('Albedo does not support signing random blobs');\n  }\n\n  // @ts-expect-error - This is not a supported operation so we don't use the params\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async signAuthEntry(params: { entryPreimageXDR: string; publicKey?: string }): Promise<{ result: string }> {\n    throw new Error('Albedo does not support signing authorization entries');\n  }\n}\n\nexport enum AlbedoNetwork {\n  PUBLIC = 'public',\n  TESTNET = 'testnet',\n}\n"],"names":["ModuleType","WalletNetwork","AlbedoNetwork"],"mappings":";;;;;AAIO,MAAM,SAAY,GAAA,SAAA;AAElB,MAAM,YAAwC,CAAA;AAAA,EAA9C,WAAA,GAAA;AACL,IAAA,IAAA,CAAA,UAAA,GAAyBA,gBAAW,CAAA,UAAA,CAAA;AAEpC,IAAoB,IAAA,CAAA,SAAA,GAAA,SAAA,CAAA;AACpB,IAAsB,IAAA,CAAA,WAAA,GAAA,QAAA,CAAA;AACtB,IAAqB,IAAA,CAAA,UAAA,GAAA,sBAAA,CAAA;AACrB,IAAsB,IAAA,CAAA,WAAA,GAAA,oDAAA,CAAA;AAAA,GAAA;AAAA,EAEtB,MAAM,WAAgC,GAAA;AACpC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,YAAgC,GAAA;AACpC,IAAO,OAAA,MAAA,CAAO,SAAU,CAAA,EAAE,CAAA,CAAE,KAAK,CAAC,EAAE,MAAO,EAAA,KAAM,MAAM,CAAA,CAAA;AAAA,GACzD;AAAA,EAEA,MAAM,OAAO,MAAoG,EAAA;AAC/G,IAAA,IAAI,OAAO,OAAY,KAAAC,mBAAA,CAAc,UAAU,MAAO,CAAA,OAAA,KAAYA,oBAAc,OAAS,EAAA;AACvF,MAAA,MAAM,IAAI,KAAA,CAAM,CAAuC,oCAAA,EAAA,MAAA,CAAO,OAAO,CAAE,CAAA,CAAA,CAAA;AAAA,KACzE;AAEA,IAAA,IAAI,aAAqB,MAAO,CAAA,GAAA,CAAA;AAChC,IAAW,KAAA,MAAA,SAAA,IAAa,OAAO,UAAY,EAAA;AACzC,MAAa,UAAA,GAAA,MAAM,OAChB,EAAG,CAAA;AAAA,QACF,GAAK,EAAA,UAAA;AAAA,QACL,MAAQ,EAAA,SAAA;AAAA,QACR,OAAS,EAAA,MAAA,CAAO,OAAY,KAAAA,mBAAA,CAAc,SAAS,QAAuB,gBAAA,SAAA;AAAA,OAC3E,CACA,CAAA,IAAA,CAAK,CAAC,EAAE,mBAAA,OAA0B,mBAAmB,CAAA,CAAA;AAAA,KAC1D;AAEA,IAAO,OAAA,EAAE,QAAQ,UAAW,EAAA,CAAA;AAAA,GAC9B;AAAA;AAAA;AAAA,EAIA,MAAM,SAAS,MAA2E,EAAA;AACxF,IAAM,MAAA,IAAI,MAAM,8CAA8C,CAAA,CAAA;AAAA,GAChE;AAAA;AAAA;AAAA,EAIA,MAAM,cAAc,MAAuF,EAAA;AACzG,IAAM,MAAA,IAAI,MAAM,uDAAuD,CAAA,CAAA;AAAA,GACzE;AACF,CAAA;AAEY,IAAA,aAAA,qBAAAC,cAAL,KAAA;AACL,EAAAA,eAAA,QAAS,CAAA,GAAA,QAAA,CAAA;AACT,EAAAA,eAAA,SAAU,CAAA,GAAA,SAAA,CAAA;AAFA,EAAAA,OAAAA,cAAAA,CAAAA;AAAA,CAAA,EAAA,aAAA,IAAA,EAAA;;;;;;"}